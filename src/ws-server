#!/usr/bin/php

<?php

swoole_set_process_name('swoole-ws-server');

// Here we make sure that at least some different directories are covered for this example.
foreach ([
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../autoload.php',
    __DIR__ . '/../../../vendor/autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php'
] as $file) {
    if (file_exists($file)) {
        define('PHPUNIT_COMPOSER_INSTALL', $file);
    }
}

if (!defined('PHPUNIT_COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );
    die(1);
}

require PHPUNIT_COMPOSER_INSTALL;

use Conveyor\Actions\Abstractions\AbstractAction;
use Conveyor\SocketHandlers\Interfaces\PersistenceInterface;
use Swoole\Http\Request;
use Swoole\Http\Response;
use Swoole\Table;
use Swoole\WebSocket\Frame;
use Swoole\WebSocket\Server;
use Conveyor\SocketHandlers\SocketMessageRouter;

class ExampleFirstCreateAction extends AbstractAction
{
    protected string $name = 'example-first-action';
    public function execute(array $data): mixed
    {
        $this->send('Example First Action Executed!', null, true);
        return null;
    }
    public function validateData(array $data) : void {}
}

class ExampleSecondCreateAction extends AbstractAction
{
    protected string $name = 'example-second-action';
    public function execute(array $data): mixed
    {
        $this->send('Example Second Action Executed!', null, true);
        return null;
    }
    public function validateData(array $data) : void {}
}

class SocketChannelsTable implements PersistenceInterface
{
    protected Table $table;

    public function __construct()
    {
        $this->table = new Table(10024);
        $this->table->column('channel', Table::TYPE_STRING, 40);
        $this->table->column('listening', Table::TYPE_STRING, 200);
        $this->table->create();
    }

    public function connect(int $fd, string $channel): void
    {
        $this->table->set($fd, ['channel' => $channel]);
    }

    public function disconnect(int $fd): void
    {
        $this->table->del($fd);
    }

    public function getAllConnections(): array
    {
        $collection = [];
        foreach($this->table as $key => $value) {
            $collection[$key] = $value['channel'];
        }
        return $collection;
    }

    public function listen(int $fd, string $action): void
    {
        $listening = $this->table->get($fd, 'listening');
        $listeningArray = explode(',', $listening);
        $listeningArray = array_filter($listeningArray);
        $listeningArray[] = $action;
        $this->table->set($fd, [
            'channel' => $this->table->get($fd, 'channel'),
            'listening' => implode(',', $listeningArray),
        ]);
    }

    public function getListener(int $fd): array
    {
        return explode(',', $this->table->get($fd, 'listening'));
    }

    public function getAllListeners(): array
    {
        $collection = [];
        foreach($this->table as $key => $value) {
            $collection[$key] = explode(',', $value['listening']);
        }
        return $collection;
    }

    public function assoc(int $fd, int $userId): void
    {
        // TODO: Implement assoc() method.
        return;
    }

    public function disassoc(int $fd): void
    {
        // TODO: Implement disassoc() method.
        return;
    }

    public function getAssoc(int $fd): int
    {
        // TODO: Implement getAssoc() method.
        return 0;
    }

    public function getAllAssocs(): array
    {
        // TODO: Implement getAllAssocs() method.
        return [];
    }

    public function stopListener(int $fd, string $action): bool
    {
        // TODO: Implement stopListener() method.
    }

    public function stopListenersForFd(int $fd): bool
    {
        // TODO: Implement stopListenersForFd() method.
    }
}

$persistenceService = new SocketChannelsTable;
$websocket = new Server('0.0.0.0', 8003);

$websocket->on('request', function(Request $request, Response $response) {
    $response->header("Content-Type", "text/html");
    $response->header("Charset", "UTF-8");
    $response->end(file_get_contents(__DIR__ . '/ws-sample-client.html'));
});

$websocket->on('message', function (Server $server, Frame $frame) use ($persistenceService) {
    echo 'Received message (' . $frame->fd . '): ' . $frame->data . PHP_EOL;
    $socketRouter = new SocketMessageRouter($persistenceService);
    $socketRouter->add(new ExampleFirstCreateAction);
    $socketRouter->add(new ExampleSecondCreateAction);
    $socketRouter($frame->data, $frame->fd, $server);
});

$websocket->start();
